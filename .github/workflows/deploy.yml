name: Deploy to AWS
on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      # Gradle 캐시 설정 추가
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 단일 Gradle 명령어로 통합
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build --info --stacktrace

      # OpenAPI 문서 생성 확인
      - name: Verify OpenAPI documentation
        run: |
          mkdir -p build/resources/main/static/docs
          cp build/api-spec/swagger.yaml build/resources/main/static/docs/ || true
          ls -l build/resources/main/static/docs/

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/book-review-app .
          docker push ${{ secrets.DOCKER_USERNAME }}/book-review-app

      - name: Copy docker-compose file to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC_PRIVATE_KEY }}
          source: "docker-compose.yml"
          target: "/home/ec2-user"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd /home/ec2-user
            docker-compose down
            docker-compose pull
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }} \
            DB_URL=${{ secrets.DB_URL }} \
            DB_USERNAME=${{ secrets.DB_USERNAME }} \
            DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} \
            docker-compose up -d